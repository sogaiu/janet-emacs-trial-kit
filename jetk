#! /usr/bin/env janet

(import ./common :as c)

(defn have-emacs?
  []
  (if (= :windows (os/which))
    (when (not (c/ensure-win-bin "emacs.exe"))
      (eprintf "Failed to find emacs.exe on PATH\n")
      (break false))
    (when (not (c/ensure-bin "emacs"))
      (eprintf "Failed to find emacs on PATH\n")
      (break false)))
  (def ver-str
    (c/get-version ["emacs" "--version"]
                   ~(sequence "GNU Emacs " (capture (to -1)))))
  (when (not ver-str)
    (eprintf "Failed to determine emacs version\n")
    (break false))
  #
  ver-str)

(defn get-major-version
  [ver-str]
  (-?>> (peg/match ~(sequence (capture :d+)) ver-str)
        first
        scan-number))

(defn emacs-built-with-ts?
  []
  (def cmd ["emacs"
            "--batch"
            "--funcall" "treesit-available-p"])
  (with [of (file/temp)]
    (with [ef (file/temp)]
      (zero? (os/execute cmd :p {:out of :err ef})))))

(defn emacs-sufficient?
  [ver-str]
  (def result (get-major-version ver-str))
  (when (not result)
    (eprintf "Failed to parse emacs version string: %s" ver-str)
    (break false))
  (when (< result 29)
    (eprintf "Emacs version must be 29 or above, found: %s\n" ver-str)
    (break false))
  (when (not (emacs-built-with-ts?))
    (eprintf "Emacs may not have tree-sitter support")
    (break false))
  #
  true)

(defn setup
  []
  # verify emacs exists and its version is sufficient
  (def emacs-ver-str (have-emacs?))
  (when (not emacs-ver-str)
    (os/exit 1))
  (when (not (emacs-sufficient? emacs-ver-str))
    (os/exit 1))
  # ensure appropriate c compiler available
  (when (not (c/have-cc?))
    (os/exit 1))
  (when (not (os/stat "tree-sitter"))
    (os/mkdir "tree-sitter")))

(defn main
  [& argv]
  (setup)
  (os/execute ["emacs" "--init-directory=."
               ;(array/slice argv 1)]
              :px))

